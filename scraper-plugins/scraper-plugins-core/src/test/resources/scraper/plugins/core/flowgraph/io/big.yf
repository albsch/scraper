---
name: linear

graphs:
  start:
    - type: IoNode
      input: "T_STRING"
      output: "generated"

  page-extract:
    - type: PipeNode
      pipeTargets:
        - fetch-dashboard
        - dashboard-to-gids

  fetch-dashboard:
    - type: RetryNode
      retry: 50
      retryTarget: get-main-http

  get-main-http:
    - type: IoNode
      input: "{generated}"
      output: "response"

  dashboard-to-gids:
    - type: IoNode
      input: "{response}"

#    - type: RegexNode
#      content: "{response}"
#      collect: true
#      # this regex does not work at the earliest pages, the page structure changes?!?!
#      # \/g\/(\d*).*?data-src="(.*?\/(\d+)\/.*?.(png|jpg|gif))"
#      regex: \/g\/(\d*).*?img src="(.*?\/(\d+)\/.*?.(png|jpg|gif))"
#      groups:
#        gid: 1
#        tUrl: 2
#        mid: 3
#        format: 4
#
#    - type: MapNode
#      list: "{output}"
#      mapTarget: gallery-extract
#      service: d-gallery
#      threads: 4
#
#
#  gallery-extract:
#    - type: EchoNode
#      puts:
#        gid: "{{element}@gid}"
#    - type: ForkNode
#      forkTargets:
#        - download-thumbs
#        - download-metadata
#      service: gallery
#      threads: 4
#
#
#  download-thumbs:
#    - type: FileExistsNode
#      path: "/srv/archive/nhentai/thumbnails/{{element}@gid}.{{element}@format}"
#    - type: IfThenElseNode
#      condition: "{exists}"
#      falseTarget: download-thumbs-new
#
#  download-thumbs-new:
#    - type: RetryNode
#      retry: 550
#      retryTarget: download-thumb-http
#
#  download-thumb-http:
#    - type: HttpRequestNode
#      url: "{{element}@tUrl}"
#      put: thumbContent
#      expectedResponse: FILE
#      path: "/srv/archive/nhentai/thumbnails/{{element}@gid}.{{element}@format}"
#
#
#  download-metadata:
#    - type: FileExistsNode
#      path: "/srv/archive/nhentai/metadata/{{element}@gid}.json"
#    - type: IfThenElseNode
#      condition: "{exists}"
#      falseTarget: download-metadata-new
#
#  download-metadata-new:
#    - type: RetryNode
#      retry: 550
#      retryTarget: download-metadata-http
#
#  download-metadata-http:
#    - type: HttpRequestNode
#      url: "https://nhentai.net/g/{{element}@gid}/"
#
#    - type: RegexNode
#      content: "{response}"
#      collect: true
#      regex: N\.gallery\((.*?)\);
#      groups:
#        json: 1
#
#    - type: MapNode
#      list: "{output}"
#      mapTarget: clean-metadata
#      service: io
#      threads: 10
#
#  # Removes personal and image related metadata. Removes for every tag the
#  # url, count, and id
#  clean-metadata:
#    - type: JsonStringToObjectNode
#      jsonString: "{{element}@json}"
#      jsonObject: "json"
#
#    - type: CleanJsonObjectNode
#      jsonObject: "{json}"
#      cleanedObject: "json"
#      clean:
#        - "num_favorites"
#        - images
#        - "\\[\\]tags|url"
#        - "\\[\\]tags|count"
#        - "\\[\\]tags|id"
#
#    - type: ObjectToJsonStringNode
#      object: "{json}"
#      result: "json"
#
#    - type: WriteLineToFileNode
#      output: "/srv/archive/nhentai/metadata/{gid}.json"
#      line: "{json}"
#      overwrite: true
