def version = '0.9.0-rc1'
def api = '0.9'

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

task bundleAll(dependsOn: [':bundleFatJar', ':bundleApi', ':bundleCore']) { }

task bundleFatJar(type: Jar) { t ->
    dependsOn subprojects.collect { it.tasks.withType(Jar) }

    manifest { attributes 'Main-Class': 'scraper.app.Scraper' }
    subprojects.each {s ->
        from {
            s.configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
        }
        from {
            s.sourceSets.main.output
        }
    }

    archiveFileName = "Scraper-${api}-${getGitHash()}-bundled.jar"
    destinationDirectory = file("$rootDir/build/libs")
}

task bundleCore(type: Jar, dependsOn: [':scraper-app:jar', ':scraper-core:jar']) {
    manifest { attributes 'Main-Class': 'scraper.app.Scraper' }
    subprojects.each {s ->
        // should be a better way to exclude sub projects
        if(!s.toString().contains('scraper-nodes') && !s.toString().contains('scraper-plugins')) {
            from {
                s.configurations.compileClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
            }
            from {
                s.sourceSets.main.output
            }
        }
    }

    archiveFileName = "Scraper-${version}-core.jar"
    destinationDirectory = file("$rootDir/build/libs")
}

task bundleApi(type: Jar, dependsOn: ':scraper-api:jar') {
    from {
        project(":scraper-api").sourceSets.main.output
    }

    archiveFileName = "Scraper-${api}-api.jar"
    destinationDirectory = file("$rootDir/build/libs")
}


clean.doLast {
    file(new File(projectDir, "/build")).deleteDir()
}

